apiVersion: v1
data:
  pyfile: "def handler(input, context):\n    def mean(lst):\n        total = 0\n        for
    x in lst:\n            total += x\n        return total / len(lst)\n\n    output
    = {}\n    #print(input)\n    if (\"n_cpus\" not in context.env):\n        # First
    run, must populate 'env' dictionary\n\n        # Find all cpu_percent-X, i.e.
    find how many CPUs are there\n        keys = input.keys()\n        result = [i
    for i in keys if i.startswith(\"cpu_percent\")]\n        n_cpus = len(result)\n
    \       context.env[\"n_cpus\"] = n_cpus\n\n        # Store current averages in
    'env' for later\n        for i in range(n_cpus):\n            context.env[f\"60-cpu_percent-{i}\"]
    = [input[f\"cpu_percent-{i}\"]]\n            context.env[f\"1h-cpu_percent-{i}\"]
    = [input[f\"cpu_percent-{i}\"]]\n            \n        # Other metric: virtual
    memory used in the last 60s\n        context.env[f\"60-virtual_memory-percent\"]
    = [input[f\"virtual_memory-percent\"]]\n    else:\n        # Just add the current
    readings\n        n_cpus = context.env[\"n_cpus\"]\n        for i in range(n_cpus):\n
    \           # Append the new reading\n            context.env[f\"60-cpu_percent-{i}\"].append(input[f\"cpu_percent-{i}\"])\n
    \           context.env[f\"1h-cpu_percent-{i}\"].append(input[f\"cpu_percent-{i}\"])\n\n
    \           # Remove the first one, i.e.,\n            # taking only the necessary
    for current rolling average\n            context.env[f\"60-cpu_percent-{i}\"]
    = context.env[f\"60-cpu_percent-{i}\"][-60//5:]\n            context.env[f\"1h-cpu_percent-{i}\"]
    = context.env[f\"1h-cpu_percent-{i}\"][-3600//5:]\n        \n        # Add readings
    for memory used\n        context.env[f\"60-virtual_memory-percent\"].append(input[f\"virtual_memory-percent\"])\n
    \       context.env[f\"60-virtual_memory-percent\"] = context.env[f\"60-virtual_memory-percent\"][-60//5:]\n\n
    \   # Compute moving average\n    for i in range(n_cpus):\n        output[f\"avg-util-cpu{i}-60sec\"]
    = mean(context.env[f\"60-cpu_percent-{i}\"])\n        output[f\"avg-util-cpu{i}-1h\"]
    = mean(context.env[f\"1h-cpu_percent-{i}\"])\n    output[f\"avg-util-memory-60sec\"]
    = mean(context.env[f\"60-virtual_memory-percent\"])\n        \n    return output\n"
kind: ConfigMap
metadata:
  creationTimestamp: "2022-07-05T12:34:54Z"
  name: pyfile
  namespace: arthurlima
  resourceVersion: "4600175"
  uid: 1d2b0983-41e9-462a-b3df-8a6fbcf00a59